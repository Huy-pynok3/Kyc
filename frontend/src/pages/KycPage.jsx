import React, { useEffect, useState, useRef } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import FloatingMascots from "@/components/FloatingMascots";
import PaymentSection from "./PaymentSection";
import { Check } from "lucide-react";
import jsQR from "jsqr"

export default function KycPage() {
    const location = useLocation();
    const walletData = location.state;
    const navigate = useNavigate();

    const [email, setEmail] = useState("");
    const [mapleLink, setMapleLink] = useState("");
    const [kycSubmitted, setKycSubmitted] = useState(false);
    const canvasRef = useRef();
    // Payment state variables
    const [hasPaid, setHasPaid] = useState(false);
    const [checkingPayment, setCheckingPayment] = useState(false);
    const [paymentResult, setPaymentResult] = useState(null);

    const [loading, setLoading] = useState(false);
    const [justPaid, setJustPaid] = useState(false);

    const hasPaidRef = useRef(false); // ƒë·ªÉ tracking hasPaid ƒë√∫ng ngay l·∫≠p t·ª©c

    const [expired, setExpired] = useState(false); // tr·∫°ng th√°i h·∫øt h·∫°n thanh to√°n

    const handleImageUpload = (e) => {
        const file = e.target.files[0];
        if (!file) return;

        const img = new Image();
        img.onload = () => {
            const canvas = canvasRef.current;
            const ctx = canvas.getContext("2d");

            canvas.width = img.width;
            canvas.height = img.height;
            ctx.drawImage(img, 0, 0);

            const imageData = ctx.getImageData(0, 0, img.width, img.height);
            const code = jsQR(imageData.data, imageData.width, imageData.height);

            if (code) {
                setMapleLink(code.data);
            } else {
                alert("Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c m√£ QR, vui l√≤ng th·ª≠ l·∫°i.");
            }
        };
        img.src = URL.createObjectURL(file);
    };

    const checkPayment = async () => {
        if (!walletData?.wallet) return;
        setCheckingPayment(true);

        try {
            const res = await fetch(
                `${import.meta.env.VITE_API_BASE_URL}/api/check-payment?from=${walletData.wallet}`,
                {
                    headers: {
                        Authorization: `Bearer ${import.meta.env.VITE_API_TOKEN}`,
                    },
                }
            );
            const data = await res.json();

            if (data.success) {
                if (!hasPaidRef.current) {
                    setHasPaid(data.success);
                    hasPaidRef.current = true;

                    setJustPaid(true);
                    setTimeout(() => setJustPaid(false), 4000);
                }
            }

            setPaymentResult(data);
        } catch (err) {
            console.error("L·ªói khi ki·ªÉm tra giao d·ªãch:", err);
        }

        setCheckingPayment(false);
    };

    // Ki·ªÉm tra thanh to√°n m·ªói 5 gi√¢y
    useEffect(() => {
        const interval = setInterval(() => {
            // if (expired) return; // N·∫øu ƒë√£ h·∫øt h·∫°n, kh√¥ng c·∫ßn ki·ªÉm tra n·ªØa
            if (hasPaidRef.current || expired) return; // N·∫øu ƒë√£ thanh to√°n, kh√¥ng c·∫ßn ki·ªÉm tra n·ªØa

            checkPayment();
        }, 5000); // 5s ki·ªÉm tra m·ªôt l·∫ßn

        return () => clearInterval(interval);
    }, [expired]);

    // useEffect(() => {
    //   if (justPaid) {
    //     const audio = new Audio("/success.mp3");
    //     audio.play();
    //   }
    // }, [justPaid]);
    // useEffect(() => {
    //   if (hasPaid) {
    //     // ƒê·ª£i nh·∫π ƒë·ªÉ user th·∫•y th√¥ng b√°o ƒë√£ thanh to√°n (n·∫øu c·∫ßn)
    //     setTimeout(() => {
    //     }, 1000);
    //   }
    // }, [hasPaid]);
    useEffect(() => {
        if (!walletData?.wallet) return navigate("/");
        const checkExistingKyc = async () => {
            try {
                const res = await fetch(`${import.meta.env.VITE_API_BASE_URL}/api/kyc/status/${walletData.wallet}`, {
                    headers: {
                        Authorization: `Bearer ${import.meta.env.VITE_API_TOKEN}`,
                    },
                });
                const data = await res.json();

                if (["approved", "pending", "rejected", "checking"].includes(data.status)) {
                    // N·∫øu v√≠ ƒë√£ t·ªìn t·∫°i, t·ª± ƒë·ªông chuy·ªÉn h∆∞·ªõng sang trang tr·∫°ng th√°i
                    navigate(`/status?wallet=${walletData.wallet}`);
                }
            } catch (err) {
                console.log("V√≠ ch∆∞a c√≥ KYC ‚Äì ti·∫øp t·ª•c cho ph√©p nh·∫≠p form");
            } 
        };

        checkExistingKyc();
    }, [walletData?.wallet, navigate]);

    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);

        try {
            const payload = {
                email,
                mapleLink,
                wallet: walletData.wallet,
                signature: walletData.signature,
            };

            console.log("G·ª≠i th√¥ng tin:", payload);

            const res = await fetch(`${import.meta.env.VITE_API_BASE_URL}/api/kyc/submit`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${import.meta.env.VITE_API_TOKEN}`,
                },
                body: JSON.stringify(payload),
            });

            const result = await res.json();
            if (!res.ok) throw new Error(result.error || "G·ª≠i th·∫•t b·∫°i");

            // ƒêi·ªÅu h∆∞·ªõng sang trang tr·∫°ng th√°i

            navigate(`/status?wallet=${walletData.wallet}`);
            alert("KYC ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!");
            setKycSubmitted(true); 
        } catch (err) {
            alert("L·ªói khi g·ª≠i KYC: " + err.message);
        }

        setLoading(false);
    };

    return (
        <div
            className="min-h-screen flex flex-col items-center justify-center px-4 bg-gray-50"
            style={{
                backgroundImage: `
                url('https://msu.io/images/main/section_a/msu_symbol.png'),
                url('https://msu.io/images/main/section_a/bg_section_a.png')
                `,
                backgroundRepeat: "no-repeat, no-repeat",
                backgroundPosition: "calc(50% + 375px) -347px, 50%",
                backgroundSize: "1410px auto, cover",
            }}
        >
            <div className="bg-white p-6 rounded-xl shadow-md max-w-md w-full space-y-6">
                {!hasPaid ? (
                    <>
                        <FloatingMascots hidden={true} />
                        <PaymentSection
                            wallet={walletData.wallet}
                            checkingPayment={checkingPayment}
                            checkPayment={checkPayment}
                            paymentResult={paymentResult}
                            qrUrl={walletData.qrUrl}
                            onExpire={() => setExpired(true)} // callback b√°o khi h·∫øt h·∫°n
                            onResetExpire={() => setExpired(false)} // callback ƒë·ªÉ reset tr·∫°ng th√°i h·∫øt h·∫°n
                        />
                        
                    </>
                ) : justPaid ? (
                    <>
                        <FloatingMascots />

                        <div
                            className="mb-4 bg-green-100 border border-green-300 text-green-800 px-4 py-4 rounded-lg shadow-md
                            transition-all duration-500 ease-in-out transform hover:scale-[1.01]"
                        >
                            <h3 className="text-sm font-semibold mb-1">üí∏ Thanh to√°n th√†nh c√¥ng!</h3>
                            <p className="text-sm mb-2">
                                C·∫£m ∆°n b·∫°n ƒë√£ thanh to√°n. Vui l√≤ng ho√†n t·∫•t b∆∞·ªõc KYC b√™n d∆∞·ªõi.
                            </p>
                            <button
                                onClick={() => setJustPaid(false)} // ho·∫∑c ·∫©n t·ª± ƒë·ªông sau 5s
                                className="text-green-700 underline text-xs"
                            >
                                ƒê√≥ng
                            </button>
                        </div>
                    </>
                ) : !kycSubmitted ? (
                    <>
                        <FloatingMascots />
                        <form onSubmit={handleSubmit} className="space-y-4">
                            <div>
                                <label className="block mb-1 text-sm font-medium text-gray-600">
                                    Email (tu·ª≥ ch·ªçn):
                                </label>
                                <input
                                    type="email"
                                    value={email}
                                    onChange={(e) => setEmail(e.target.value)}
                                    placeholder="you@example.com"
                                    className="w-full px-3 py-2 border rounded-lg"
                                />
                            </div>

                            <div>
                                <label className="block mb-1 text-sm font-medium text-gray-600">
                                    Link KYC t·ª´ MapleStory (b·∫Øt bu·ªôc):
                                </label>
                                <input
                                    type="url"
                                    value={mapleLink}
                                    onChange={(e) => setMapleLink(e.target.value)}
                                    placeholder="https://form.argosidentity.com/?pid=p4n42yhhy1&..."
                                    className="w-full px-3 py-2 border rounded-lg"
                                    required
                                />
                            </div>

                            <div>
                                <label className="block mb-1 text-sm font-medium text-gray-600">
                                    Ho·∫∑c upload ·∫£nh QR KYC:
                                </label>
                                <input
                                    type="file"
                                    accept="image/*"
                                    onChange={handleImageUpload}
                                    className="w-full px-3 py-2 border rounded-lg"
                                />
                                <canvas ref={canvasRef} style={{ display: "none" }}></canvas>
                                <ul className="text-sm text-red-500 list-disc ml-5 mt-2">
                                    <li>·∫¢nh c·∫ßn r√µ n√©t, ƒë·ªß s√°ng, kh√¥ng b·ªã che ho·∫∑c c·∫Øt g√≥c QR</li>
                                    <li>N√™n c·∫Øt m√†n h√¨nh ch·ªâ hi·ªÉn th·ªã m√£ QR</li>
                                    <li>Upload ·∫£nh QR KYC l√† h·ªó tr·ª£ ae kh√¥ng qu√©t ƒë∆∞·ª£c QR l·∫•y link</li>
                                </ul>
                            </div>

                            <button
                                type="submit"
                                disabled={loading}
                                className="w-full bg-indigo-600 text-white py-2 px-4 rounded hover:bg-indigo-700"
                            >
                                {loading ? "ƒêang x·ª≠ l√Ω..." : "T·∫°o phi√™n KYC"}
                            </button>
                        </form>
                    </>
                ) : (
                    <>
                        <FloatingMascots />
                        <div className="text-center">
                            <p className="mb-2 text-green-600 font-semibold">
                                <Check size={20} className="text-green-600" />
                                ƒê√£ ghi nh·∫≠n th√¥ng tin!
                            </p>

                            <a href={`/status?wallet=${walletData.wallet}`} className="text-blue-600 underline">
                                üëâ Nh·∫•n v√†o ƒë√¢y ƒë·ªÉ ki·ªÉm tra k·∫øt qu·∫£ KYC
                            </a>
                        </div>
                    </>
                )}
            </div>
            <div>
                {walletData && (
                    <div className="mt-4 text-sm text-green-600">
                        <Check size={20} className="inline mr-2" />
                        ƒê√£ k√Ω x√°c nh·∫≠n cho v√≠: <span className="font-mono">{walletData.wallet}</span>
                    </div>
                )}
            </div>
        </div>
    );
}
