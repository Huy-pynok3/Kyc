import express from "express";
import { ethers, parseUnits, isAddress, formatUnits } from "ethers";
import dotenv from "dotenv";
dotenv.config();
import Payment from "../models/payments.js";
import { sendTelegramAlert } from "../services/telegramBot.js";

const router = express.Router();

// Chu·∫©n b·ªã RPC & Contract
const provider = new ethers.JsonRpcProvider(process.env.BSC_RPC);
const block = await provider.getBlockNumber();
console.log("Block:", block);

const DECIMALS = 6;
const MIN_AMOUNT = parseUnits(process.env.MIN_AMOUNT || "5", DECIMALS);
const RECEIVER = (process.env.RECEIVER_WALLET || "").toLowerCase();
const USDT_CONTRACT = process.env.USDT_CONTRACT;

if (!RECEIVER || !USDT_CONTRACT) {
    throw new Error("‚ùå Thi·∫øu c·∫•u h√¨nh RECEIVER_WALLET ho·∫∑c USDT_CONTRACT trong .env");
}

const ERC20_ABI = ["event Transfer(address indexed from, address indexed to, uint256 value)"];

const usdt = new ethers.Contract(process.env.USDT_CONTRACT, ERC20_ABI, provider);

// Route ki·ªÉm tra thanh to√°n
router.get("/check-payment", async (req, res) => {
    const from = req.query.from?.toLowerCase();
    if (!from || !ethers.isAddress(from)) {
        return res.status(400).json({ success: false, error: "ƒê·ªãa ch·ªâ kh√¥ng h·ª£p l·ªá" });
    }

    try {

       // Check bank
        const bankPayment = await Payment.findOne({ from, method: "bank" });
        if (bankPayment) {
            return res.json({
                success: true,
                method: "bank",
                txHash: bankPayment.txHash,
                amount: bankPayment.amount,
            });
        }

        // Check n·∫øu ƒë√£ ƒë∆∞·ª£c duy·ªát tay
        const manual = await Payment.findOne({ from, forceApproved: true });
        if (manual) {
            // await sendTelegramAlert("payment", {
            //     method: "crypto",
            //     wallet: from,
            //     amount: manual.amount,
            //     txHash: manual.txHash || "Ch∆∞a c√≥",
            //     note: "ƒê√£ duy·ªát tay thanh to√°n",
            // });
            if (!manual.notified) {
                await sendTelegramAlert("payment", {
                    method: "crypto",
                    wallet: manual.from,
                    amount: manual.amount,
                    note: "‚úÖ Duy·ªát tay (forceApproved)",
                });

                manual.notified = true;
                await manual.save(); // c·∫≠p nh·∫≠t flag ƒë√£ g·ª≠i
            }

            return res.json({
                success: true,
                method: "crypto",
                txHash: manual.txHash,
                amount: manual.amount,
                manual: true,
            });
        }


        // Check log th·∫≠t t·ª´ USDT contract
        const currentBlock = await provider.getBlockNumber();

        const logs = await usdt.queryFilter(usdt.filters.Transfer(from, RECEIVER), currentBlock - 10000, currentBlock);

        if (!logs.length) {
            return res.json({
                success: false,
                message: "Ch∆∞a ph√°t hi·ªán giao d·ªãch USDT ph√π h·ª£p",
            });
        }

        logs.sort((a, b) => b.blockNumber - a.blockNumber); // ∆Øu ti√™n giao d·ªãch m·ªõi nh·∫•t

        const match = logs.find((log) => log.args.value.gte(MIN_AMOUNT));
        if (!match) {
            return res.json({
                success: false,
                message: "Giao d·ªãch kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng y√™u c·∫ßu",
                // message: `Ch∆∞a c√≥ giao d·ªãch USDT >= ${ethers.formatUnits(MIN_AMOUNT, DECIMALS)}`
            });
        }
        //// Ki·ªÉm tra ƒë√£ l∆∞u v√†o Mongo ch∆∞a

        const alreadySaved = await Payment.findOne({
            txHash: match.transactionHash,
        });
        if (alreadySaved) {
            return res.json({
                success: true,
                txHash: alreadySaved.txHash,
                amount: alreadySaved.amount,
            });
        }

        // Ki·ªÉm tra tr√πng
        const existing = await Payment.findOne({ txHash: match.transactionHash });
        if (existing) {
            return res.json({
                success: true,
                txHash: existing.txHash,
                amount: existing.amount,
            });
        }

        // L∆∞u l·∫°i
        const saved = await Payment.create({
            from,
            txHash: match.transactionHash,
            amount: formatUnits(match.args.value, DECIMALS),
            confirmedAt: new Date(),
        });

        // G·ª≠i th√¥ng b√°o Telegram
        await sendTelegramAlert("payment", {
            method: "crypto",
            wallet: from,
            amount: formatUnits(match.args.value, DECIMALS),
            txHash: match.transactionHash || "Ch∆∞a c√≥",
        });

        res.json({
            success: true,
            method: "crypto",
            txHash: saved.txHash,
            amount: saved.amount,
        });
    } catch (err) {
        console.error("‚ùå L·ªói khi ki·ªÉm tra giao d·ªãch:", err);
        res.status(500).json({ success: false, error: "L·ªói server" });
    }
});

// Route ƒë·ªÉ duy·ªát tay thanh to√°n
router.post("/manual-approve", async (req, res) => {
    const { wallet } = req.body;
    if (!wallet || !isAddress(wallet)) {
        return res.status(400).json({ success: false, message: "ƒê·ªãa ch·ªâ kh√¥ng h·ª£p l·ªá" });
    }
    try {
        // Ki·ªÉm tra n·∫øu ƒë√£ c√≥ giao d·ªãch th·ª±c s·ª± ho·∫∑c ƒë√£ ƒë∆∞·ª£c duy·ªát tay
        const lowerWallet = wallet.toLowerCase();
        const existing = await Payment.findOne({
            from: lowerWallet,
            $or: [
                { forceApproved: true },
                { amount: { $gte: "0.000001" } }, // ho·∫∑c parseFloat(amount) > 0 n·∫øu l∆∞u l√† s·ªë
            ],
        });
        if (existing) {
            return res.json({
                success: false,
                message: "V√≠ n√†y ƒë√£ c√≥ thanh to√°n ho·∫∑c ƒë√£ ƒë∆∞·ª£c duy·ªát tay r·ªìi",
            });
        }
        await Payment.findOneAndUpdate(
            { from: lowerWallet },
            {
                txHash: "manual-" + Date.now(),
                amount: "0",
                confirmedAt: new Date(),
                forceApproved: true,
            },
            { upsert: true } // t·∫°o m·ªõi n·∫øu ch∆∞a c√≥
        );

        res.json({ success: true, message: "ƒê√£ duy·ªát tay thanh to√°n cho v√≠ n√†y" });
    } catch (err) {
        res.status(500).json({ success: false, error: "L·ªói server khi duy·ªát tay" });
    }
});

//
// router.post("/webhook", async (req, res) => {
//     const { transId, description, amount, bankCode } = req.body;

//     if (!description || !amount) {
//       return res.status(400).json({ success: false, error: "Thi·∫øu th√¥ng tin t·ª´ SePay" });
//     }

//     try {
//       // D√πng description l√†m v√≠ (ƒë√£ g·∫Øn t·ª´ frontend)
//       const wallet = description.toLowerCase();

//       const existing = await Payment.findOne({ from: wallet });
//       if (existing) {
//         return res.json({ success: true, message: "ƒê√£ x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥" });
//       }

//       await Payment.create({
//         from: wallet,
//         txHash: `sepay-${transId}`,
//         amount,
//         confirmedAt: new Date(),
//         status: "approved",
//       });

//       res.json({ success: true });
//     } catch (err) {
//       console.error("Webhook SePay l·ªói:", err);
//       res.status(500).json({ success: false });
//     }
//   });

router.post("/webhook", async (req, res) => {
    console.log("üì© Nh·∫≠n webhook t·ª´ SePay:", req.body);

    const authHeader = req.headers["authorization"];
    const expectedKey = `Apikey ${process.env.SEPAY_SECRET_KEY}`;

    if (authHeader !== expectedKey) {
        return res.status(403).json({ error: "Sai ho·∫∑c thi·∫øu API Key" });
    }

    const { id, transferAmount, content, referenceCode } = req.body;

    
    const txHash = referenceCode || `sepay_${id}`;
    const amount = transferAmount;
    const description = content;

    // Ki·ªÉm tra b·∫Øt bu·ªôc
    if (!txHash || !amount || !description) {
        return res.status(400).json({ error: "Thi·∫øu d·ªØ li·ªáu webhook" });
    }
    // T√°ch v√≠ ng∆∞·ªùi d√πng t·ª´ n·ªôi dung chuy·ªÉn kho·∫£n
    const matched = description?.match(/^SEVQR\+TKPTPT(0x[a-fA-F0-9]{40})$/);

    if (!matched) {
        return res.status(400).json({ error: "Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ v√≠ trong description" });
    }

    const wallet = matched[1].toLowerCase();
    // const wallet = description?.trim()?.toLowerCase();

    if (!/^0x[a-fA-F0-9]{40}$/.test(wallet)) {
        return res.status(400).json({ error: "Sai ƒë·ªãnh d·∫°ng v√≠ t·ª´ description" });
    }

    try {
        const exists = await Payment.findOne({ txHash });
        if (exists) {
            return res.json({ success: false, message: "Giao d·ªãch ƒë√£ t·ªìn t·∫°i" });
        }

        await Payment.create({
            from: wallet,
            txHash,
            amount,
            confirmedAt: new Date(),
            method: "bank",
            //   forceApproved: true,
        });

        console.log("‚úÖ ƒê√£ ghi nh·∫≠n thanh to√°n SePay cho v√≠:", wallet);
        res.json({ success: true });
    } catch (err) {
        console.error("‚ùå L·ªói x·ª≠ l√Ω webhook SePay:", err);
        res.status(500).json({ error: "L·ªói server" });
    }
});

// Route l·∫•y t·∫•t c·∫£ giao d·ªãch thanh to√°n
router.get("/latest-kyc", async (req, res) => {
    try {
        const latest = await Payment.findOne({ status: "pending" }).sort({ confirmedAt: -1 }).limit(1);
        const wallet = latest?.from || null;
        // res.json({ from: latest?.from || null });
        res.json({ wallet });
    } catch (error) {
        console.error("L·ªói khi l·∫•y giao d·ªãch thanh to√°n:", error);
        return res.status(500).json({ success: false, error: "L·ªói server" });
    }
});
//

export default router;
